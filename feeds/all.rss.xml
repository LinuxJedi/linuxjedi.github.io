<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LinuxJedi's /dev/null</title><link>http://linuxjedi.co.uk/</link><description>The /dev/null ramblings of a Linux Jedi</description><atom:link href="http://linuxjedi.co.uk/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 25 Jan 2015 16:33:00 +0000</lastBuildDate><item><title>Working With Git</title><link>http://linuxjedi.co.uk/posts/2015/Jan/25/working-with-git/</link><description>&lt;p&gt;At a recent meeting HP's Advanced Technology Group has been agreeing on standards for working with git, covering mainly the collaboration and versioning aspects.  Today I will share with you how I do this in my Open Source projects which has some crossover with the group's work.&lt;/p&gt;
&lt;div class="section" id="versioning"&gt;
&lt;h2&gt;Versioning&lt;/h2&gt;
&lt;p&gt;I use &lt;a class="reference external" href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt; everywhere I can.  In fact I used to pretty much use it everywhere before I knew it was a standard.  This means that I have my GitHub trees layed out so that 'master' is the latest stable code, v1.0 branch is the latest stable v1.0 code, v1.1 branch is the latest in v1.1 and so on.  I then create GPG signed tags from these branches to create releases as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout v1.1
git tag -s v1.1.2 -m &lt;span class="s1"&gt;&amp;#39;Version 1.1.2 release&amp;#39;&lt;/span&gt;
git push --tags
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="forking"&gt;
&lt;h2&gt;Forking&lt;/h2&gt;
&lt;p&gt;Even if it is just me working on a particular project I will always use forks and pull requests to work on code.  This model works well with &lt;a class="reference external" href="http://semver.org/"&gt;Travis CI&lt;/a&gt; because it can test code prior to merging and give feedback in the pull request.&lt;/p&gt;
&lt;p&gt;For this example I'm assuming you are using SSH keys and two-factor authentication with Git, if you aren't you need to do this ASAP.  Instructions can be found on &lt;a class="reference external" href="https://github.com/blog/1614-two-factor-authentication"&gt;GitHub's blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A fork is typically created as follows:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a fork in GitHub, you can do this by clicking the fork button on a project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Grab a local copy of your fork to work with (replacing &lt;cite&gt;USERNAME&lt;/cite&gt; and &lt;cite&gt;Repository&lt;/cite&gt; with whatever is applicable to you):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@github.com:USERNAME/Repository
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Then you should set the upstream remote so that you can easily grab the latest code as needed.  I've used HTTPS here because you don't need to be authenticated to do this unless it is a private repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git remote add upstream https://github.com/PROJECT/Repository
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-a-new-branch"&gt;
&lt;h2&gt;Starting a New Branch&lt;/h2&gt;
&lt;p&gt;Whenever you are starting a new group of work, create a new branch.  This holds true for features or just basic one line fixes.  In your fork:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout master
git pull --ff-only upstream master
git push
git checkout -b my_feature
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This pulls the latest code from the upstream master to your master, pushes that to your fork and then creates a new checkout based on that code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="syncing-fork"&gt;
&lt;h2&gt;Syncing Fork&lt;/h2&gt;
&lt;p&gt;If you have worked on some code and at the same time someone else has merged code that may conflict (a pull request will tell you this straight away) you can merge upstream with your commits as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git fetch upstream
git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This fetches the upstream code into a local cache and then will merge it.  If there are conflicts they will be flagged for you to resolve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pull-requests"&gt;
&lt;h2&gt;Pull Requests&lt;/h2&gt;
&lt;p&gt;When your code is good and ready you can send it up as a pull request.  To do this you first need to push it up to your local repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git push --set-upstream origin my_feature
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then when you go to the project's repository you will see a button to file a pull request.  If you are using continuous integration such as Travis CI you should wait for that to give a green result and preferably peer review too before clocking the merge button.&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Sun, 25 Jan 2015 16:33:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2015-01-25:posts/2015/Jan/25/working-with-git/</guid><category>HP</category><category>Advanced Technology Group</category><category>Git</category></item><item><title>C Library Visibility</title><link>http://linuxjedi.co.uk/posts/2015/Jan/22/c-library-visibility/</link><description>&lt;p&gt;I was surprised by the recent &lt;a class="reference external" href="http://mysqlserverteam.com/how-to-use-ssl-and-mysql-client-library-in-the-same-binary/"&gt;announcement&lt;/a&gt; that MySQL are going to start to conceal the hidden function calls in their C connector.  Surprised because although this is great news I had expected them to do this years ago.  Working for HP's Advanced Technology Group I realise I take such things for granted.  For this blog post I'm going to talk about why it is important and how to do it.&lt;/p&gt;
&lt;p&gt;So, when you create a dynamic library in C the default thing that happens is every function call in that library effectively becomes a potential API call.  Whether you document every single function or not to make it official API is up to you but I suspect in 99.99% of cases there are private functions you don't want users to mess with.  Additionally holding the symbol information for every function so that you can link your application to it takes a massive amount of space, one such library I can think of is 8x bigger than it should be due to exposing every function call.&lt;/p&gt;
&lt;p&gt;In MySQL's case and likely others this can cause a problem with collisions during linking.  MySQL can use its bundled in YaSSL library to supply SSL, and due to the functions being exposed this can cause problems if your application links to libmysqlclient and OpenSSL since they both use the same public API calls in many places.&lt;/p&gt;
&lt;p&gt;RedHat and other distributions actually solve this in MySQL by stripping the binaries of unneeded symbols at compile time.  This is indeed one effective solution.  But I don't believe this is the correct solution.  In fact Ulrich Drepper in &lt;a class="reference external" href="https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf"&gt;How To Write Shared Libraries&lt;/a&gt; pretty much reserves this as a last resort.&lt;/p&gt;
&lt;div class="section" id="link-time-visibility"&gt;
&lt;h2&gt;Link Time Visibility&lt;/h2&gt;
&lt;p&gt;The solution I and many others recommend is using visibility at link time.  There are three parts to applying this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The compiler flag&lt;/li&gt;
&lt;li&gt;An extra include file&lt;/li&gt;
&lt;li&gt;Marking the functions you want to be in the API as public&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I shall go through these steps for GCC, other compilers will be very similar and there is plenty of information on the internet about this.&lt;/p&gt;
&lt;div class="section" id="compiler-flag"&gt;
&lt;h3&gt;Compiler Flag&lt;/h3&gt;
&lt;p&gt;You simply need to add one compiler flag which will hide all function calls by default instead of exposing them all by default:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-fvisibility=hidden
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="include-file"&gt;
&lt;h3&gt;Include File&lt;/h3&gt;
&lt;p&gt;This is one example taken from &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt; and there is an example with more platform support on the &lt;a class="reference external" href="https://gcc.gnu.org/wiki/Visibility"&gt;GCC Visibility manual page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this example you need to change &lt;tt class="docutils literal"&gt;BUILDING_ASQL&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ASQL_API&lt;/tt&gt; to suit your own naming.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#if defined(BUILDING_ASQL)&lt;/span&gt;
&lt;span class="cp"&gt;# if defined(HAVE_VISIBILITY) &amp;amp;&amp;amp; HAVE_VISIBILITY&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API __attribute__ ((visibility(&amp;quot;default&amp;quot;)))&lt;/span&gt;
&lt;span class="cp"&gt;# elif defined (__SUNPRO_C) &amp;amp;&amp;amp; (__SUNPRO_C &amp;gt;= 0x550)&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API __global&lt;/span&gt;
&lt;span class="cp"&gt;# elif defined(_MSC_VER)&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API extern __declspec(dllexport)&lt;/span&gt;
&lt;span class="cp"&gt;# else&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API&lt;/span&gt;
&lt;span class="cp"&gt;# endif &lt;/span&gt;&lt;span class="cm"&gt;/* defined(HAVE_VISIBILITY) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#else  &lt;/span&gt;&lt;span class="cm"&gt;/* defined(BUILDING_ASQL) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# if defined(_MSC_VER)&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API extern __declspec(dllimport)&lt;/span&gt;
&lt;span class="cp"&gt;# else&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API&lt;/span&gt;
&lt;span class="cp"&gt;# endif &lt;/span&gt;&lt;span class="cm"&gt;/* defined(_MSC_VER) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* defined(BUILDING_ASQL) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="marking-public-api"&gt;
&lt;h3&gt;Marking Public API&lt;/h3&gt;
&lt;p&gt;With the above include file you need to define &lt;tt class="docutils literal"&gt;BUILDING_ASQL&lt;/tt&gt; somewhere in your library compiling.  This makes sure that during the library compiling/linking all the functions can be seen but they will be hidden at link time from external applications.&lt;/p&gt;
&lt;p&gt;Then when you are defining an API call in your .h file you can do as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hidden_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;ASQL_API&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;public_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see here I have prepended the function declaration with &lt;tt class="docutils literal"&gt;ASQL_API&lt;/tt&gt; for any function I wish to be part of the public API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;If you leave undocumented API dangling people will tend to use it, which causes all sorts of issues when you want to change some of the internal functions.  Ideally when writing an API setting the visibility should be a very early step, but thankfully it is one that can easily be added to a project at any time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Thu, 22 Jan 2015 09:25:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2015-01-22:posts/2015/Jan/22/c-library-visibility/</guid><category>HP</category><category>Advanced Technology Group</category><category>C</category><category>API</category><category>MySQL</category></item><item><title>Webserver Concealing</title><link>http://linuxjedi.co.uk/posts/2015/Jan/21/webserver-concealing/</link><description>&lt;p&gt;Right now there are bots on the internet scanning every IP possible for vulnerable servers.  This is a fact of life on the internet.  This means you need to keep any internet facing machines as secure as possible.&lt;/p&gt;
&lt;p&gt;Whilst it is no panacea one step you can take to hide the version of the web server software you are using.  If there is a zero-day bug a bot or malicious person is scanning for and you are vulnerable this can help hide it.&lt;/p&gt;
&lt;p&gt;I was recently looking at an SSL problem with a local high school and found the server was reporting the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Server:Apache/2.2.15 (Novell)
X-Powered-By:PHP/5.3.3
&lt;/pre&gt;
&lt;p&gt;There are several problems here, all are solvable:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Novell is unmaintained.  There are no security updates.  This needs replacing with something such as a Linux distribution or FreeBSD which does get updates.&lt;/li&gt;
&lt;li&gt;Apache 2.2.15 and PHP 5.3.3 are both around 4-5 years old.  They have dozens of known bugs and secrity flaws which are fixed in newer versions.&lt;/li&gt;
&lt;li&gt;The server version is advertised.  I was able to find this information easily which means any hacker can, then he can cross-reference with known security flaws and do whatever he wants with this server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Clearly the first thing that should be done here is to update the server and its software packages.  But in addition it is possible to hide the versions used so at least one of these three points is eliminated.&lt;/p&gt;
&lt;p&gt;First to hide the Apache server version we simply need to add one line to the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;ServerTokens&lt;/span&gt; prod
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The server will now only announce that it is running Apache but no server version or OS used.&lt;/p&gt;
&lt;p&gt;As for PHP, you can turn the announcement off completely with the following in your php.ini file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;expose_php&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;off&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is only one small security improvement, but having many layers of security will help dramatically to protect your servers.  I only recommend this after dealing with things like software updates, firewalls, code security audits, etc...&lt;/p&gt;
&lt;p&gt;As a side note, if you are using PHP I highly recommend using &lt;a class="reference external" href="http://suhosin.org/"&gt;Suhosin&lt;/a&gt; to help secure your server installation.&lt;/p&gt;
</description><pubDate>Wed, 21 Jan 2015 19:30:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2015-01-21:posts/2015/Jan/21/webserver-concealing/</guid><category>HP</category><category>Advanced Technology Group</category><category>Security</category></item><item><title>The Pointer Corruption Bug</title><link>http://linuxjedi.co.uk/posts/2015/Jan/20/the-pointer-corruption-bug/</link><description>&lt;p&gt;Or an alternative name for this post...&lt;/p&gt;
&lt;div class="section" id="why-api-docs-should-have-examples"&gt;
&lt;h2&gt;Why API Docs Should Have Examples&lt;/h2&gt;
&lt;p&gt;As part of my continuation of libAttachSQL for HP's Advanced Technology Group I have recently been focusing on a Python based wrapper called pyAttachSQL.  This is currently at an alpha level of release with no package builds yet.&lt;/p&gt;
&lt;p&gt;Today I want to talk about one (silly on my part) very frustrating bug I found whilst working on pyAttachSQL and why this means API docs should have examples for every call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-crash"&gt;
&lt;h2&gt;The Crash&lt;/h2&gt;
&lt;p&gt;Whilst writing the group connection functions I was using a &lt;a class="reference external" href="https://docs.python.org/2/c-api/arg.html#c.Py_BuildValue"&gt;Py_BuildValue&lt;/a&gt; call to generate parameters to use in a callback &lt;a class="reference external" href="https://docs.python.org/2/c-api/object.html#c.PyObject_CallObject"&gt;PyObject_CallObject&lt;/a&gt;.  So the code looked a little like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cbargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Py_BuildValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;iOOO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pycon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pycon&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cb_args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;PyObject_CallObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cb_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cbargs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cbargs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those who are Python API veterans will be able to see straight away where I went wrong but I am quite new to the API.  The code was segfaulting on &lt;tt class="docutils literal"&gt;PyObject_CallObject&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-big-dumb-mistake"&gt;
&lt;h2&gt;My Big Dumb Mistake&lt;/h2&gt;
&lt;img alt="" src="/images/droids.jpg" /&gt;
&lt;p&gt;Whilst debugging this I found the problem was in &lt;tt class="docutils literal"&gt;cbargs&lt;/tt&gt;, for some reason the pointers to &lt;tt class="docutils literal"&gt;pycon&lt;/tt&gt; and alike were slightly different to when they were set.  After some time going over it again and again in GDB and watching the pointers get incremented it suddenly hit me.  The incrementation was happening during reference increment functions inside &lt;tt class="docutils literal"&gt;Py_BuildValue&lt;/tt&gt;.  Which makes sense because the one first items in a &lt;tt class="docutils literal"&gt;PyObject&lt;/tt&gt; structure is the reference count.  I was supposed to pass pointers, not pointers to pointers.  The &lt;tt class="docutils literal"&gt;Py_BuildValue&lt;/tt&gt; function has no type checking so was taking whatever you passed to it as a pointer to a structure.&lt;/p&gt;
&lt;p&gt;So the question many of you would be asking is: why did you pass pointers to pointers?  That is easy to answer...  Earlier in the code I have been using the &lt;a class="reference external" href="https://docs.python.org/2/c-api/arg.html#c.PyArg_ParseTuple"&gt;PyArg_ParseTuple&lt;/a&gt; and similar functions which are on the same documentation page, using a similar API and I assumed the API was consistent with no examples to show me otherwise.  The fix was to simply remove the &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; symbols from the above code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learnt"&gt;
&lt;h2&gt;Lessons Learnt&lt;/h2&gt;
&lt;p&gt;I guess there is two lessons I have learnt from this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't assume that an API is consistent&lt;/li&gt;
&lt;li&gt;Add examples for every API call in the documentation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll shortly be opening a ticket for libAttachSQL and pyAttachSQL to implement the second item.&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Tue, 20 Jan 2015 09:16:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2015-01-20:posts/2015/Jan/20/the-pointer-corruption-bug/</guid><category>HP</category><category>Advanced Technology Group</category><category>C</category><category>Python</category><category>API</category><category>Documentation</category><category>libAttachSQL</category></item><item><title>YubiKey for OS Logins</title><link>http://linuxjedi.co.uk/posts/2015/Jan/19/yubikey-for-os-logins/</link><description>&lt;p&gt;I have mentioned a few times in this blog that HP takes security very seriously and HP's Advanced Technology Group is always looking into new ways of making things secure.  Recently the team all got a &lt;a class="reference external" href="https://www.yubico.com/products/yubikey-hardware/yubikey-neo/"&gt;YubiKey Neo&lt;/a&gt; to use.  The initial idea was we would be trying the FIDO U2F with Google accounts but several of us went much further.&lt;/p&gt;
&lt;p&gt;Yazz Atlas from our team has been working on getting his SSH key into the NEO with some success.  I initially got my GPG key to work with the smart card feature in the NEO and have since been tinkering with a couple of other things.&lt;/p&gt;
&lt;p&gt;I happened to find an original YubiKey in a drawer which was used for OTP two-factor authentication to a server I no longer have access to.  I wanted to use this as a way of two-factor authentication for my computers.  Unfortunately there is no good way of doing this on the Mac at the moment so I came up with a different way of doing a less secure two-factor authentication with it (but more secure than a fixed password).&lt;/p&gt;
&lt;p&gt;The original YubiKey's have two &amp;quot;slots&amp;quot; in them.  Each slot can store either an OTP two-factor authentication identity or a static password.  You can tap a YubiKey to get the first slot and hold for around 3 seconds for the second slot.  The way I'm using this is to have the slots store static passwords, I then have a hand typed part of my password and a second static part stored on the YubiKey.  This means that if the YubiKey is stolen/used it is useless without my hand typed-part.  I have a backup of the YubiKey's static password in my &lt;a class="reference external" href="https://lastpass.com/"&gt;LastPass&lt;/a&gt; account (which incidentally uses two-factor authentication).&lt;/p&gt;
&lt;p&gt;There was a minor snag in this to begin with, my Macs are encrypted with FileVault which has a known login problem.  If you type a password too quickly it actually drops some of characters that you have typed.  The YubiKey is a virtual keyboard and although it deliberately doesn't type too quickly, it is too fast for FileVault.  If your YubiKey is a version 2.3 or higher this is easy to fix.  In the &lt;a class="reference external" href="https://www.yubico.com/products/services-software/personalization-tools/"&gt;YubiKey Personalization Tool&lt;/a&gt; you can go to settings and change the output frequency, this setting change can then be used to update a slot.  But if like me your original YubiKey is an older version you cannot do this.  There is a way around this by generating a new key, but it requires the command line (the GUI doesn't have the options to change the delay whilst generating a new key).&lt;/p&gt;
&lt;p&gt;First of all you need the command line YubiKey Personalization Tool.  There are &lt;a class="reference external" href="https://yubico.github.io/yubikey-personalization/releases.html"&gt;Linux, Mac and Windows versions available&lt;/a&gt; and some Linux distros have it in their repository.  Using this tool you can generate a new random static password with a typing delay as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ykpersonalize -2 -opacing-20ms -ostrong-pw2 -ostrong-pw1 -ostatic-token
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can change the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-2&lt;/span&gt;&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/tt&gt; if you wish to program slot 1 instead.  The typing delay is added using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pacing-20ms&lt;/span&gt;&lt;/tt&gt; option.  Unfortunately this flag doesn't quite match the GUI, if you want to match the GUI options here is what you need to use:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;20ms Delay - &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pacing-10ms&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;40ms Delay - &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pacing-20ms&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;60ms Delay - &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pacing-20ms&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pacing-10ms&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For FileVault it is recommended you using the 40ms delay as a minimum.  The 20ms delay works most of the time but can still fail.&lt;/p&gt;
&lt;p&gt;So, now to log into my machines I type in the part of the password I have remembered and then press the YubiKey to fill in the rest of the password.&lt;/p&gt;
</description><pubDate>Mon, 19 Jan 2015 16:14:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2015-01-19:posts/2015/Jan/19/yubikey-for-os-logins/</guid><category>YubiKey</category><category>Security</category><category>HP</category><category>Advanced Technology Group</category></item><item><title>USB Flash Drives - Trimming the FAT</title><link>http://linuxjedi.co.uk/posts/2015/Jan/05/usb-flash-drives-trimming-the-fat/</link><description>&lt;p&gt;As with most of you who read this blog I carry USB flash drives around with me all the time.  Right now I have 3 Kingston DTSE9 sticks on my keyring of various sizes each with a different purpose.  Whilst these drives are nowhere near the fastest out there they are the only ones I have had so far that don't snap off keyrings.&lt;/p&gt;
&lt;img alt="" src="/images/king16GB_DTSE9_2.jpg" /&gt;
&lt;p&gt;For this blog post I'll be talking about data where security is not a priority.  My encrypted flash drives are currently using &lt;a class="reference external" href="https://veracrypt.codeplex.com/"&gt;VeraCrypt&lt;/a&gt; but that is beyond the scope of this blog post.&lt;/p&gt;
&lt;div class="section" id="fat32-woes"&gt;
&lt;h2&gt;FAT32 woes&lt;/h2&gt;
&lt;p&gt;The largest one I have is 64GB and due to some of the work I do for HP's Advanced Technology Group this often needs to have large files on it.  Traditionally FAT32 has been used as a file system for memory cards and flash drives, one of the biggest reasons for this is that it is compatible with pretty much every computer operating system out there.  But FAT32 has many flaws:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it has a single file limit of 4GB.  That may sound huge but this rules out DVD images and large databases.&lt;/li&gt;
&lt;li&gt;it does not support POSIX based permissions which anyone who uses Linux is used to.&lt;/li&gt;
&lt;li&gt;it doesn't support journalling so with a removable drive data corruption is very common.&lt;/li&gt;
&lt;li&gt;as a minor issue it is also designed for spinning disks with many more write cycles than flash.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I needed was something that fixes as many of those problems as possible but is also compatible with Linux, Mac OS X and Windows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternatives"&gt;
&lt;h2&gt;Alternatives&lt;/h2&gt;
&lt;p&gt;I looked into several alternatives to FAT32 and summarised my findings below.  I'm primarily looking for out-of-box support, I know there are paid third-party add-ons to operating systems to add support.&lt;/p&gt;
&lt;div class="section" id="exfat"&gt;
&lt;h3&gt;exFAT&lt;/h3&gt;
&lt;p&gt;A company looked into all the problems with FAT and created a filesystem designed for use with flash drives, they called this &lt;em&gt;exFAT&lt;/em&gt;.  Unfortunately that company is Microsoft and what they created is not an open standard and is full of patents.&lt;/p&gt;
&lt;p&gt;This means that only people who have paid licenses can use exFAT.  This includes Mac OS X and digital camera manufacturers but unfortunately means Linux support is very limited.&lt;/p&gt;
&lt;p&gt;exFAT is therefore thrown out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hfs"&gt;
&lt;h3&gt;HFS+&lt;/h3&gt;
&lt;p&gt;HFS+ is the primary file system used by Mac OS X.  There is good support for this in Macs (obviously) and Linux, but no support in Windows.&lt;/p&gt;
&lt;p&gt;Unfortunately that means HFS+ is out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ntfs"&gt;
&lt;h3&gt;NTFS&lt;/h3&gt;
&lt;p&gt;NTFS is Microsoft's primary file system in NT based operating systems (for most people this means Windows XP onwards).  Like HFS+ it isn't a bad file system for flash drives and in recent Linux distributions has very good support.  Unfortunately in Mac OS X it can only be used in read-only mode.&lt;/p&gt;
&lt;p&gt;Another Microsoft FS thrown out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="udf"&gt;
&lt;h3&gt;UDF&lt;/h3&gt;
&lt;p&gt;Yes, you read that correctly, UDF.  It is a filesystem which was originally designed for use with optical media.  But, it has since been adapted for use with hard drives and flash drives!&lt;/p&gt;
&lt;p&gt;The maximum file size is 16EB (actually bigger than the maximum volume size).  It supports POSIX file system permissions.  But most importantly, it works with Linux, Mac OS X and Windows (Vista onwards) out of the box!&lt;/p&gt;
&lt;p&gt;In addition the UDF format was designed for packet writing so it works by appending on the end of data on the file system and expiring the old data.  In theory this could lead to less wear of the drive.  Flash drives typically use dynamic wear leveling which is similar to the static wear leveling used in SSDs but less complex.  The algorithm used may mean that the packet writing has no real advantage on the wear of the drive.  I don't have enough data to say for certain.&lt;/p&gt;
&lt;p&gt;The file system itself works like a journal.  It appends new data to the end of the log with a new version of the file table.  So, if a write was not completed successfully it will use the previous version of the log.  This also means recovery of deleted files is possible by traversing previous versions of the data log.&lt;/p&gt;
&lt;p&gt;For me this ticks all the boxes so I am using it with a 64GB UDF formatted flash.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="making-a-udf-flash-drive"&gt;
&lt;h2&gt;Making a UDF flash drive&lt;/h2&gt;
&lt;div class="section" id="mac-os-x"&gt;
&lt;h3&gt;Mac OS X&lt;/h3&gt;
&lt;p&gt;Unfortunately Disk Utility doesn't let you format a flash drive as UDF but you can use the command line to do it.&lt;/p&gt;
&lt;p&gt;First of all you need to figure out the drive path for your flash drive.  It will be in the format &lt;tt class="docutils literal"&gt;/dev/disk{drive_no}&lt;/tt&gt; where drive_no is the drive number, if it is followed by the letter &lt;em&gt;s&lt;/em&gt; and another number then that is a partition and not what we need at this stage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diskutil list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you need to find out the block size (it is typically 512).  Make a note of this number because you will need it later:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diskutil info /dev/disk&lt;span class="o"&gt;{&lt;/span&gt;drive_no&lt;span class="o"&gt;}&lt;/span&gt; | grep &lt;span class="s2"&gt;&amp;quot;Block Size&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The drive can't be changed until we unmount the partitions so run this for every partition that is currently in-use for your drive:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diskutil unmount /dev/disk&lt;span class="o"&gt;{&lt;/span&gt;drive_no&lt;span class="o"&gt;}&lt;/span&gt;s&lt;span class="o"&gt;{&lt;/span&gt;partition_no&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Due to the nature of the UDF format it is possible that the operating system would still detect the drive as FAT32 afterwards so we need to blank the drive with zeros.  This could take some time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diskutil secureErase 0 /dev/disk&lt;span class="o"&gt;{&lt;/span&gt;drive_no&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the drive can be formatted, replace &lt;em&gt;block_size&lt;/em&gt; with the number you wrote down above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo newfs_udf -b &lt;span class="o"&gt;{&lt;/span&gt;block_size&lt;span class="o"&gt;}&lt;/span&gt; /dev/disk&lt;span class="o"&gt;{&lt;/span&gt;drive_no&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally the drive can be mounted again for use as normal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;diskutil mount /dev/disk&lt;span class="o"&gt;{&lt;/span&gt;drive_no&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;In Linux things get a little easier.  First of all unmount the partitions on the drive and then we need the block size, write this one down:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo blockdev --getbsz /dev/sd&lt;span class="o"&gt;{&lt;/span&gt;drive_letter&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We then need to zero out the drive so that it isn't incorrectly detected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sd&lt;span class="o"&gt;{&lt;/span&gt;drive_letter&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to make the UDF format, replacing &lt;em&gt;block_size&lt;/em&gt; with the number noted above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo mkudffs -b &lt;span class="o"&gt;{&lt;/span&gt;block_size&lt;span class="o"&gt;}&lt;/span&gt; --media-type&lt;span class="o"&gt;=&lt;/span&gt;hd /dev/sd&lt;span class="o"&gt;{&lt;/span&gt;drive_letter&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Mon, 05 Jan 2015 22:34:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2015-01-05:posts/2015/Jan/05/usb-flash-drives-trimming-the-fat/</guid><category>USB</category><category>Flash</category><category>Filesystems</category><category>HP</category><category>Advanced Technology Group</category></item><item><title>Family Travel Technology</title><link>http://linuxjedi.co.uk/posts/2014/Dec/28/family-travel-technology/</link><description>&lt;p&gt;My family and I spent a few days before Christmas visiting family away from home.  We booked two interconnecting hotel rooms so our children could have their own room and we could sleep with a little bit of peace.  As with many trips there is often a period between dinner and sleep where you are stuck in a hotel room with nothing to do so this time I devised a plan for entertainment.&lt;/p&gt;
&lt;p&gt;First of all, we all have internet connected devices, between phones, gaming devices, my laptop, etc... we actually had 9 devices with us (some I will talk about later in this post).  As with many hotel WiFi plans there is a cap on the number of devices you can have assigned to your room.  The WiFi itself was quite speedy for a hotel and was fast enough to share across several devices.  To get around this limit and also to create our own personal network I used a &lt;a class="reference external" href="http://www.netgear.co.uk/home/products/networking/wifi-routers/PR2000.aspx"&gt;Netgear PR2000 Travel Router&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="" src="/images/netgear.jpg" /&gt;
&lt;p&gt;The Netgear router connects to a public network via. a network cable or WiFi and creates its own WiFi/wired network for you to use.  This means you use any one of your devices to log into the hotel WiFi and to the hotel it looks like just the router is connected.  This is a fantastic device and I benchmarked it before I went on vacation, I was easily pushing 20mbit over the internet in both directions with it in less than ideal conditions so it is was perfect for travelling with.  I absolutely love this device and I think the only flaw I have found with it is that it gets into a reboot loop after you first configure it and have to power cycle it to make it work.&lt;/p&gt;
&lt;p&gt;The only thing I would like to see improved with this device is the inclusion of a US power connector.  It can be powered via. USB or by clipping on an included EU or UK power plug.  If you power it using a wall plug connection you can use the USB port on the device to share a USB stick or drive across your private network.  That said I've tested and a C7 (figure of 8) power cable will be compatible if not elegant to look at, much like using a C7 in an Apple Mac power adaptor.&lt;/p&gt;
&lt;p&gt;As part of the entertainment we wanted a movie night.  The children had a selection of films they wanted to watch and I had already transcoded them from their DVDs onto my laptop.  My wife and I are currently watching box sets of the TV series of 24 and we wanted to watch this.  So, in the children's room I hooked my Apple TV into their TV and in our room I used the HDMI on my Macbook Pro (2014 13&amp;quot; retina model) in our room.  The Macbook Pro does not have an included DVD drive, luckily earlier this year I bought a USB &lt;a class="reference external" href="https://www.samsung.com/uk/consumer/memory-cards-hdd-odd/odd/odd/SE-S084D/TSBS"&gt;Samsung S084D DVD drive&lt;/a&gt; second hand for £4.&lt;/p&gt;
&lt;p&gt;To stream the video to the Apple TV in the children's room I used an application called &lt;a class="reference external" href="http://beamer-app.com/"&gt;Beamer&lt;/a&gt;.  This converted the video on-the-fly to a format the Apple TV could use and streamed it.  It has worked great with every file format I have thrown at it and automatically find the Apple TV with no problems.  With the time slider on it I could also see how long was left on the film before they had finished with it.  Whilst in the parents room we were using Apple's built-in DVD player.&lt;/p&gt;
&lt;p&gt;The whole setup worked perfectly, throughout the stay the children watched two films on the Apple TV using Beamer and we got half way through a series of 24.  Being my geeky self I'm impressed at how well the setup glued together mostly with parts I already had at home.  The whole lot fitted easily in my backpack and I had lots of space to spare for other things.&lt;/p&gt;
</description><pubDate>Sun, 28 Dec 2014 16:18:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2014-12-28:posts/2014/Dec/28/family-travel-technology/</guid><category>Apple</category><category>Netgear</category><category>Beamer</category></item><item><title>Autotools and Mac Universal binaries</title><link>http://linuxjedi.co.uk/posts/2014/Nov/25/autotools-and-mac-universal-binaries/</link><description>&lt;p&gt;Recently I have been working on a Python based wrapper for &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt; and found that when testing on a Mac I was having trouble compiling the wrapper.  It turns out that Python included in Mac operating systems uses a universal binary (also called fat binary) format and since libAttachSQL is not compiled that way it would not link correctly.&lt;/p&gt;
&lt;p&gt;For those who have never come across this, Universal binaries were originally intended to contain executables for multiple platforms (such as PPC and i386) to ease hardware transition.  The OS will only load the compatible part into memory and use that.  Python as well as several other current Mac binaries are compiled to have i386 and x86_64 binaries in one package.&lt;/p&gt;
&lt;p&gt;Compiling a Universal binary is actually relatively easy but I didn't want to put the hard work on the use who is compiling the library and I wanted something I could use in other projects in the future.  So I have created an m4 script which can be used with Autotools to build Universal binaries.  This can be found in my &lt;a class="reference external" href="https://github.com/LinuxJedi/m4scripts"&gt;m4 scripts GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The script in question is called &lt;tt class="docutils literal"&gt;ax_mac_universal.m4&lt;/tt&gt; and when the &lt;tt class="docutils literal"&gt;AX_UNIVERSAL_BINARY&lt;/tt&gt; macro is used it will automatically detect if the environment supports universal binaries and add the necessary compiler flags to build them.  It also adds &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--enable-universal-binary&lt;/span&gt;&lt;/tt&gt; to configure so that you can force this feature on/off at will.&lt;/p&gt;
&lt;p&gt;This script will be included as part of the upcoming libAttachSQL 1.0.2 release.&lt;/p&gt;
</description><pubDate>Tue, 25 Nov 2014 16:38:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2014-11-25:posts/2014/Nov/25/autotools-and-mac-universal-binaries/</guid><category>HP</category><category>Advanced Technology Group</category><category>libAttachSQL</category><category>Autotools</category></item><item><title>Why JSON is bad for applications</title><link>http://linuxjedi.co.uk/posts/2014/Oct/31/why-json-is-bad-for-applications/</link><description>&lt;p&gt;Today I read an article about how company X has improved things by amongst other things ditching JSON after 2 years of using it.  Before I start on this subject I should say that JSON does have its place.  If you have a web application where a browser is talking to a web server and in particular uses JavaScript then JSON is a good fit.&lt;/p&gt;
&lt;p&gt;I've discussed this issue several times before with &lt;a class="reference external" href="http://krow.net/"&gt;Brian Aker&lt;/a&gt; who works with me at HP's Advanced Technology Group and in the past I have been hit with the issues I'm going to talk about here.&lt;/p&gt;
&lt;p&gt;JSON is human readable and easy to parse, that cannot be denied and for prototyping is good in a pinch.  The first problem comes when you need to validate data.  I've been stung many times by one end trying to read/write the JSON in a slightly different format to the other end, the end result is always not pretty.  This is one advantage that XML and SOAP has going for it over JSON since validation is easier.  I'm personally not a fan of XML but there are many who are.&lt;/p&gt;
&lt;p&gt;There are additional problems when you start using mobile platforms.  Mobile networks are unreliable, you may have a good 3G signal but it is possible to only get dial-up speed through it due to all the other users.  JSON is verbose, XML more so which requires more data transfer.  Whilst this can be resolved with protocol compression it will require additional decoding on the client side to do this.  In addition data conversion will be needed in many cases for numeric fields.&lt;/p&gt;
&lt;p&gt;The biggest problem with JSON is versioning.  As you add more features to your application there will likely come a time where you need to change the data structure for your messages.  Often you can't guarantee that your client is using the same version of the software as your server so backwards and forwards compatibility problems can arise.  Resolving these often makes the JSON messages very complex to create and decode.  This is not as much of a problem for web applications because the browser usually grabs an update version of the JavaScript on execution.  So changing the data format at any time is easy as long as both ends agree on the format.&lt;/p&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;For many applications the data you are sending is directly from a database or at least data that has been modified since being read from a database.  So you will likely want the data model for your messages to match this as much as possible.  This is where &lt;a class="reference external" href="https://developers.google.com/protocol-buffers/"&gt;Google's Protocol Buffers&lt;/a&gt; fit nicely.&lt;/p&gt;
&lt;p&gt;Protocol Buffers allow you to specify a schema for the data in a human readable format, it actually looks a little like a database schema.  They will automatically validate the data for you and have versioning built-in.  This means you can make your code easily backwards and forwards compatible.&lt;/p&gt;
&lt;p&gt;There is a positive and negative side to the data transfer of Protocol Buffers.  It is a binary protocol.  This means it takes up minimal bandwidth on the wire but also means that it is not human readable and difficult to figure out which data is for which field (although should not be used for security through obscurity).  The same could be said if you were given InnoDB table data without the schemas.  It also means it may be possible to compress the data further with something like LZO or DEFLATE.&lt;/p&gt;
&lt;p&gt;I recommend application developers consider Protocol Buffers instead of JSON when they are next developing a server/client application.&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I updated this article to explain the binary protocol a little better.  Thanks to Antony Curtis for pointing it out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><pubDate>Fri, 31 Oct 2014 20:39:00 +0000</pubDate><guid>tag:linuxjedi.co.uk,2014-10-31:posts/2014/Oct/31/why-json-is-bad-for-applications/</guid><category>HP</category><category>Advanced Technology Group</category></item><item><title>libAttchSQL Hits First GA!</title><link>http://linuxjedi.co.uk/posts/2014/Oct/22/libattchsql-hits-first-ga/</link><description>&lt;p&gt;We have come a long way since the first code was put down for &lt;a class="reference external" href="http://libattachsql.org"&gt;libAttachSQL&lt;/a&gt; on the 4th July.  It has been a fantastic project to work on so I am very pleased to announce our first GA release.&lt;/p&gt;
&lt;p&gt;For those who haven't seen it so far libAttachSQL is a non-blocking, lightweight C API for MySQL servers.  It is Apache 2.0 licensed so is compatible with most Open Source and commercial licensing.  HP's Advanced Technology Group saw a need in this field not just for HP itself but for other companies and projects too.&lt;/p&gt;
&lt;p&gt;As for the GA release itself, there are not many changes over the RC release beyond stability fixes.  A full list can be seen in the &lt;a class="reference external" href="http://docs.libattachsql.org/en/latest/appendix/version_history.html#version-1-0"&gt;version history documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition to the GA release we have recently had a driver for &lt;a class="reference external" href="https://launchpad.net/sysbench"&gt;Sysbench&lt;/a&gt; merged into their trunk so libAttachSQL can be used for benchmarking MySQL servers.  We have also started work on a tool called &lt;a class="reference external" href="https://github.com/libattachsql/attachbench"&gt;AttachBench&lt;/a&gt; which when complete will run similar MySQL tests as Sysbench but will allow for multiple connections per thread (something libAttachSQL excels at).  At the moment AttachBench requires the tables from Sysbench's &amp;quot;Select&amp;quot; test already setup and I don't recommend tinkering with it yet unless you don't mind getting a bit dirty.&lt;/p&gt;
&lt;p&gt;With the release of libAttachSQL 1.0.0 we have also launched a new website on &lt;a class="reference external" href="http://libattachsql.org"&gt;libattachsql.org&lt;/a&gt;.  It is a basic Pelican based site (very much like this blog) but will make it much easier for anyone to add content, just like this blog all the source is in &lt;a class="reference external" href="https://github.com/libattachsql/libattachsql.org"&gt;RST files on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download links for libAttachSQL 1.0.0 can be found on the &lt;a class="reference external" href="http://libattachsql.org/posts/2014/Oct/21/version-100-ga-released/"&gt;News section&lt;/a&gt; of the project website.  There is a source package as well as packages for RHEL/CentOS 6.x and 7.x.  Packages for Ubuntu 12.04 and 14.04 are waiting to be built in the PPA at time of posting.  We hope to have releases for more operating systems in the near future.&lt;/p&gt;
&lt;p&gt;Rest assured we are not stopping here.  I already have ideas of what I want to see in 1.1 and we have some spin-off projects planned.  If you would like to learn more please come along to my talk on libAttachSQL at &lt;a class="reference external" href="http://www.percona.com/live/london-2014/sessions/libattachsql-next-generation-c-connector-mysql"&gt;Percona Live London&lt;/a&gt;.  I'm also talking to several people outside of HP to see what they would like in libAttachSQL and am happy to talk to anyone else who wants to know more and has feedback.&lt;/p&gt;
&lt;p&gt;Many thanks to everyone who has helped us get this far.&lt;/p&gt;
</description><pubDate>Wed, 22 Oct 2014 11:35:00 +0100</pubDate><guid>tag:linuxjedi.co.uk,2014-10-22:posts/2014/Oct/22/libattchsql-hits-first-ga/</guid><category>MySQL</category><category>libAttachSQL</category><category>HP</category><category>Advanced Technology Group</category></item><item><title>libAttachSQL Single Thread vs. libmysqlclient Multi Thread</title><link>http://linuxjedi.co.uk/posts/2014/Oct/15/libattachsql-single-thread-vs-libmysqlclient-multi-thread/</link><description>&lt;p&gt;I have recently &lt;a class="reference external" href="http://linuxjedi.co.uk/posts/2014/Oct/03/libattachsql-benchmarks-with-sysbench/"&gt;posted up benchmarks&lt;/a&gt; of &lt;a class="reference external" href="http://libattachsql.org"&gt;libAttachSQL&lt;/a&gt; vs. libmysqlclient using sysbench.  Whilst these are great and shows the results I hoped for, this isn't what we designed libAttachSQL for.  It was designed for non-blocking many connections per thread.&lt;/p&gt;
&lt;p&gt;With this in mind I spent today knocking up a quick benchmark tool which replicates the Sysbench &amp;quot;Select&amp;quot; test but using libAttachSQL's connection groups on a single thread.  The code for this can be seen in the new &lt;a class="reference external" href="https://github.com/libattachsql/attachbench"&gt;AttachBench&lt;/a&gt; GitHub tree.  Of course the secondary reason for this is to try and hammer the connection groups feature, which of course did find a bug when I scaled to around 32 connections.  This has been fixed in libAttachSQL's master ready for the next release and is what I am using for these benchmarks.&lt;/p&gt;
&lt;div class="section" id="the-test"&gt;
&lt;h2&gt;The Test&lt;/h2&gt;
&lt;p&gt;I used the exact same test rig and configuration as the previous Sysbench tests and as before the test was run with 1,000,000 queries.  The AttachBench tool executed was as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;attachbench --db&lt;span class="o"&gt;=&lt;/span&gt;sbtest --user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --pass&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --db&lt;span class="o"&gt;=&lt;/span&gt;testdb --queries&lt;span class="o"&gt;=&lt;/span&gt;1000000 --connections&lt;span class="o"&gt;=&lt;/span&gt;32 --host&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --port&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I've added the results to the previous select test to the graph for comparison.  The two &amp;quot;Select&amp;quot; result sets are for Sysbench with one connection per thread.  The third is with AttachBench running the same queries, just with many connections in a single thread.&lt;/p&gt;
&lt;img alt="" src="/images/select_single_thread.png" /&gt;
&lt;p&gt;This exceeded my expectations.  Having many connections in a single thread actually outperforms many threads with one connection each.  It is early days and there is much more testing and improvement that can be done.  But I'm very encouraged by these results.&lt;/p&gt;
&lt;p&gt;I'll be talking more about libAttachSQL and these results at &lt;a class="reference external" href="http://www.percona.com/live/london-2014/sessions/libattachsql-next-generation-c-connector-mysql"&gt;Percona Live London next month&lt;/a&gt; so please come along if you are in the area.&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Wed, 15 Oct 2014 20:01:00 +0100</pubDate><guid>tag:linuxjedi.co.uk,2014-10-15:posts/2014/Oct/15/libattachsql-single-thread-vs-libmysqlclient-multi-thread/</guid><category>MySQL</category><category>libAttachSQL</category><category>HP</category><category>Advanced Technology Group</category></item><item><title>libAttachSQL 0.9.0 RC - Connection Groups</title><link>http://linuxjedi.co.uk/posts/2014/Oct/14/libattachsql-090-rc-connection-groups/</link><description>&lt;p&gt;It has been just over 4 months since I started working on &lt;a class="reference external" href="http://libattachsql.org"&gt;libAttachSQL&lt;/a&gt; for HP's Advanced Technology Group.  Today marks the first (and hopefully only) RC release of the library.&lt;/p&gt;
&lt;div class="section" id="connection-groups"&gt;
&lt;h2&gt;Connection Groups&lt;/h2&gt;
&lt;p&gt;The only real new feature that has been added to 0.9.0 is the concept of connection groups which is something I'm pretty excited about.  Internally libAttachSQL uses event loops to supply the non-blocking API.  Connection Groups join a bunch of connections together into a group that uses a single event loop.  This makes things much more efficient internally and makes applications easier to code too.&lt;/p&gt;
&lt;p&gt;Here is a simplified example of how to use it (for a more detailed example see our &lt;a class="reference external" href="http://docs.libattachsql.org/en/latest/api/examples.html#group-conncetions"&gt;example in the documentation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;First we need to create the group and add connections to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_group_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_connect_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;testdb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;attachsql_group_add_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;attachsql_connect_set_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;callbk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;con_no&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;con&lt;/tt&gt; array is just an array of connection objects and &lt;tt class="docutils literal"&gt;con_no&lt;/tt&gt; is just an array of integers so that the callback that I'll show shortly knows which connection number it is (only useful for displaying in this example).  The last three lines there will be repeated multiple times with different array numbers to add connections.&lt;/p&gt;
&lt;p&gt;We now send queries to the connections:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;attachsql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;attachsql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so forth until we have sent a query to all the connections we want.&lt;/p&gt;
&lt;p&gt;Finally we want to run the connection group until complete:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;done_count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_group_run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example &lt;tt class="docutils literal"&gt;done_count&lt;/tt&gt; is simply a global integer which increments as each callback hits EOF.  You could conceivably run various other parts of your application here and then call &lt;tt class="docutils literal"&gt;attachsql_group_run()&lt;/tt&gt; again when ready.&lt;/p&gt;
&lt;p&gt;I'm going to paste the whole callback here because it should be mostly self-explanatory, it is called when an event occurs and the code reacts to the event:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;callbk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;attachsql_connect_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;current_con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;attachsql_events_t&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;attachsql_error_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;con_no&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_query_row_st&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_EVENT_CONNECTED&lt;/span&gt;:
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connected event on con %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;con_no&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_EVENT_ERROR&lt;/span&gt;:
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error exists on con %d: %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;con_no&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attachsql_error_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="n"&gt;attachsql_error_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_EVENT_EOF&lt;/span&gt;:
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Connection %d finished&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;con_no&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;done_count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;attachsql_query_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_EVENT_ROW_READY&lt;/span&gt;:
      &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_query_row_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_query_column_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Con: %d, Column: %d, Length: %zu, Data: %.*s &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;con_no&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;attachsql_query_row_next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_EVENT_NONE&lt;/span&gt;:
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The EOF call happens when we reach the end of the result set.  You could easily make this a job server here sending more queries when the previous queries are complete.  ROW_READY should be familiar to anyone who has seen previous examples of libAttachSQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="release-and-packages"&gt;
&lt;h2&gt;Release and Packages&lt;/h2&gt;
&lt;p&gt;libAttachSQL 0.9.0RC is out today, there is a source release as well as packages for RHEL &amp;amp; CentOS 6/7 64bit as well as an Ubuntu PPA 12.04/14.04 32bit and 64bit.  Links to all these can be found on the news section of the &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL site&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Tue, 14 Oct 2014 17:14:00 +0100</pubDate><guid>tag:linuxjedi.co.uk,2014-10-14:posts/2014/Oct/14/libattachsql-090-rc-connection-groups/</guid><category>MySQL</category><category>libAttachSQL</category><category>HP</category><category>Advanced Technology Group</category></item><item><title>libAttachSQL Second Beta, After the Sledgehammer</title><link>http://linuxjedi.co.uk/posts/2014/Oct/08/libattachsql-second-beta-after-the-sledgehammer/</link><description>&lt;p&gt;Last week I &lt;a class="reference external" href="http://linuxjedi.co.uk/posts/2014/Oct/03/libattachsql-benchmarks-with-sysbench/"&gt;blogged about getting sysbench working with libAttachSQL&lt;/a&gt;.  This was not only an exercise in performance but also the first real test for &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before I had done this testing the most the early Alpha and Beta releases of libAttachSQL had gone through is a few basic queries.  So, the first thing I did when I got the sysbench driver working was slap it with 1,000,000 queries.  It pretty much exploded instantly on that.  Over the course of this release I have probably hit it with over 100,000,000 queries and things run a lot smoother.&lt;/p&gt;
&lt;p&gt;This has led to today's release of libAttachSQL 0.5.0.  As far as changes go this release has the &lt;a class="reference external" href="http://docs.libattachsql.org/en/latest/appendix/version_history.html#version-0-5"&gt;biggest changelog so far&lt;/a&gt;.  Here is a summary of the major points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;11 major bugs fixes, most of them crashing bugs&lt;/li&gt;
&lt;li&gt;Lots more documentation and examples&lt;/li&gt;
&lt;li&gt;More tests&lt;/li&gt;
&lt;li&gt;A couple of minor features&lt;/li&gt;
&lt;li&gt;A new semi-blocking mode&lt;/li&gt;
&lt;li&gt;A more consistent API for error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These last two points I should talk about a bit more.  The semi-blocking mode lets the networking code block until data is received (but not until it is all received).  For applications which access using one connection per thread this will increase performance, but will decrease performance for many connections per thread (which is what libAttachSQL was originally designed for).&lt;/p&gt;
&lt;p&gt;The error handling has moved from a user accessible struct to a type which is used in function calls.  In addition the way this is returned to the user application has been made consistent across the whole API.  This means that the API is not backwards compatible with 0.4.0.&lt;/p&gt;
&lt;p&gt;For those wishing to try out the connector the 0.5.0 beta source release &lt;a class="reference external" href="https://github.com/libattachsql/libattachsql/releases/tag/v0.5.0"&gt;can be found on GitHub&lt;/a&gt;.  The documentation is on &lt;a class="reference external" href="http://docs.libattachsql.org/en/latest/"&gt;Read The Docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This will be the last beta for libAttachSQL.  The next release will be 0.9.0 RC which will hopefully be a short cycle to our first GA release.  We have many more goodies planned after GA.  Watch this space!&lt;/p&gt;
&lt;p&gt;As always if you have any questions please get in touch either via. the comments below, the &lt;a class="reference external" href="irc://chat.freenode.net/libAttachSQL"&gt;#libAttachSQL Freenode channel&lt;/a&gt; or any other means.&lt;/p&gt;
</description><pubDate>Wed, 08 Oct 2014 20:52:00 +0100</pubDate><guid>tag:linuxjedi.co.uk,2014-10-08:posts/2014/Oct/08/libattachsql-second-beta-after-the-sledgehammer/</guid><category>MySQL</category><category>libAttachSQL</category><category>HP</category><category>Advanced Technology Group</category></item><item><title>Blogging Platforms</title><link>http://linuxjedi.co.uk/posts/2014/Oct/04/blogging-platforms/</link><description>&lt;p&gt;A couple of weeks ago I ditched Blogger as my main blogging platform.  The main reason for this was the editing tools were breaking posts containing code.  Whilst it is a great platform for basic blogging, it is not suitable for developers blogs.&lt;/p&gt;
&lt;p&gt;So, I was on the hunt for blogging platforms that would make it easy for me to write posts that contain technical content and is not expensive to run.  I also don't want to be maintaining my own web server, I may be capable of doing this but I don't want the time overhead.&lt;/p&gt;
&lt;p&gt;I tried several things out that met some of my requirements but many didn't fit all.  Wordpress was probably the closest, but I had trouble bending the free templates to my will.&lt;/p&gt;
&lt;p&gt;With many on my team at HP's Advanced Technology Group using &lt;a class="reference external" href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; for blog posts I thought I would give it a try.  Most of the team are trying out Jekyll which looks really good, but isn't for me.  I prefer &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; to Markdown and use it every day for the &lt;a class="reference external" href="http://docs.libattachsql.org"&gt;libAttachSQL documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On my journey I came across &lt;a class="reference external" href="http://tinkerer.me/"&gt;Tinkerer&lt;/a&gt; which is a layer on top of &lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Python Sphinx&lt;/a&gt; to generate a blog site from RST files.  This was great for me because Sphinx is the renderer used for libAttachSQL's docs both in the build system and &lt;a class="reference external" href="https://readthedocs.org/"&gt;Read The Docs&lt;/a&gt;.  I created a new blog on this hosted on GitHub Pages and &lt;a class="reference external" href="https://disqus.com/"&gt;Disqus&lt;/a&gt; for comments.&lt;/p&gt;
&lt;p&gt;I had several minor problems with Tinkerer, many of which I worked around, but the main flaw was no timestamp support for blog posts.  All blog posts would have a date but not a time, so in the RSS feeds it would be as if they were posted at midnight.  If you are posting at 22:00 it means in feed aggregators your post would end up below many others posted that day and multiple posts in a day could be in any order.&lt;/p&gt;
&lt;p&gt;Today I bumped into a blogging platform called &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.  It too uses RST files to generate the site, but supports metadata in the RST files to signify things such as time of post.  It was incredibly easy to port my Tinkerer posts over so I gave it a try.&lt;/p&gt;
&lt;p&gt;I have ended up with generation scripts, RST files and a theme I have modified in a &lt;a class="reference external" href="https://github.com/LinuxJedi/linuxjedi.co.uk"&gt;GitHub repo&lt;/a&gt; and the generated content in my &lt;a class="reference external" href="https://github.com/LinuxJedi/linuxjedi.github.io"&gt;GitHub Pages Repo&lt;/a&gt;.  Pelican has a built-in HTTP server which makes it easy to preview your generated HTML before it is uploaded to the site.&lt;/p&gt;
&lt;p&gt;In conclusion, Tinkerer is a great platform, but Pelican feels more mature and it seems to have a wider community around it.  I also found its templates much easier to edit.  Both platforms have an Open Source feel to the way you create and publish content which is fantastic for my usage.  I think I have finally found a blogging platform I can settle with.&lt;/p&gt;
</description><pubDate>Sat, 04 Oct 2014 22:16:00 +0100</pubDate><guid>tag:linuxjedi.co.uk,2014-10-04:posts/2014/Oct/04/blogging-platforms/</guid><category>Blog</category><category>LinuxJedi</category></item><item><title>libAttachSQL Benchmarks With Sysbench</title><link>http://linuxjedi.co.uk/posts/2014/Oct/03/libattachsql-benchmarks-with-sysbench/</link><description>&lt;p&gt;This week I have been spending a little bit of time creating a module for &lt;a class="reference external" href="https://launchpad.net/sysbench"&gt;Sysbench&lt;/a&gt; so that it can use &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt; as a database driver.  The reason for doing this is twofold:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://krow.net/"&gt;Brian&lt;/a&gt; (my boss at HP's Advanced Technology Group) said now would be a good time to benchmark libAttachSQL&lt;/li&gt;
&lt;li&gt;I really needed more than a few basic queries to shake out bugs in the library, and a benchmark is a good way to shove a few million through it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the bug front, it did find a total of 5 bugs, a couple of them serious.  Which is great, the more testing and bug finding the better.  These have all been fixed in &lt;a class="reference external" href="http://github.com/libattachsql/libattachsql"&gt;GitHub&lt;/a&gt; and will be part of the upcoming 0.5.0 release.&lt;/p&gt;
&lt;div class="section" id="the-test-setup"&gt;
&lt;h2&gt;The Test Setup&lt;/h2&gt;
&lt;p&gt;To benchmark I used an HP Z620, 6-core Xeon with 16GB RAM and an SSD.  The OS was Antergos Linux (Arch with a nicer theme) and the server was MySQL 5.6.20 compiled from source.  The only real tweaks I've made to the out-of-box config that would make any difference are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;innodb_buffer_pool_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3G&lt;/span&gt;
&lt;span class="na"&gt;innodb_locks_unsafe_for_binlog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;innodb_buffer_pool_instances&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8&lt;/span&gt;
&lt;span class="na"&gt;thread_cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;256&lt;/span&gt;
&lt;span class="na"&gt;query_cache_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;query_cache_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;max_connections&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20020&lt;/span&gt;
&lt;span class="na"&gt;max_user_connections&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/libattachsql/sysbench"&gt;Sysbench in libAttachSQL's GitHub&lt;/a&gt; was used which just has the additional driver for libAttachSQL.  Once I'm 100% happy with the driver I offer it as an upstream branch.  libAttachSQL master is used, partly due to the bug fixes and partly because there has been a large API change in master for improved error handling.&lt;/p&gt;
&lt;p&gt;For both libmysqlclient and libAttachSQL the connections were made using Unix Domain Sockets.  For the sysbench setup I just left it at the default number of rows.  The Sysbench driver for libAttachSQL enables the semi-blocking mode which is better performance for single-connection-per-thread applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="select-test"&gt;
&lt;h2&gt;Select Test&lt;/h2&gt;
&lt;p&gt;First the basic select test was run, which queries for random single integers in a table.  This was run with the MySQL driver as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;sysbench/tests/db/select.lua --db-driver&lt;span class="o"&gt;=&lt;/span&gt;mysql --mysql-socket&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --mysql-user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --mysql-password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --mysql-db&lt;span class="o"&gt;=&lt;/span&gt;testdb --num-threads&lt;span class="o"&gt;=&lt;/span&gt;8 --max-requests&lt;span class="o"&gt;=&lt;/span&gt;1000000 run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And libAttachSQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;sysbench/tests/db/select.lua --db-driver&lt;span class="o"&gt;=&lt;/span&gt;attachsql --attachsql-socket&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --attachsql-user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --attachsql-password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --attachsql-db&lt;span class="o"&gt;=&lt;/span&gt;testdb --num-threads&lt;span class="o"&gt;=&lt;/span&gt;8 --max-requests&lt;span class="o"&gt;=&lt;/span&gt;1000000 run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The results were as follows:&lt;/p&gt;
&lt;img alt="" src="/images/select_benchmark.png" /&gt;
&lt;p&gt;I am pretty impressed with these results so far, since I have done no optimisation work on the code.  I originally wanted the first GA to have performance on-par with libmysqlclient and it looks like that goal has been met.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="select-random-points"&gt;
&lt;h2&gt;Select Random Points&lt;/h2&gt;
&lt;p&gt;I used the &amp;quot;Select Random Points&amp;quot; benchmark because it is one of the only ones that comes with Sysbench which uses Prepared Statements.  It selects 10 random integers from a table per query.&lt;/p&gt;
&lt;p&gt;As before this was run on using libmysqlclient with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;sysbench/tests/db/select_random_points.lua --db-driver&lt;span class="o"&gt;=&lt;/span&gt;mysql --mysql-socket&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --mysql-user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --mysql-password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --mysql-db&lt;span class="o"&gt;=&lt;/span&gt;testdb --num-threads&lt;span class="o"&gt;=&lt;/span&gt;8 --max-requests&lt;span class="o"&gt;=&lt;/span&gt;1000000 run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with libAttachSQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;sysbench/tests/db/select_random_points.lua --db-driver&lt;span class="o"&gt;=&lt;/span&gt;attachsql --attachsql-socket&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --attachsql-user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --attachsql-password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --attachsql-db&lt;span class="o"&gt;=&lt;/span&gt;testdb --num-threads&lt;span class="o"&gt;=&lt;/span&gt;8 --max-requests&lt;span class="o"&gt;=&lt;/span&gt;1000000 run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The results were as follows:&lt;/p&gt;
&lt;img alt="" src="/images/select_random_points_benchmark.png" /&gt;
&lt;p&gt;Again there isn't a lot in it.  libmysqlclient is edging slightly over libAttachSQL in most of this chart.  I believe it is because in the libAttachSQL driver I told it to convert all results to string outputs.  This will add additional overhead.  Next week I will tweak the driver to make sure that the conversion isn't done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I'm very happy with these Sysbench tests because not only has it bashed libAttachSQL with a sledgehammer it has given me some idea of the performance.  I'm happy enough with these figures to not do any performance tuning until after the first GA release.&lt;/p&gt;
&lt;p&gt;At some point soon I will also benchmark the single-threaded multi-connection performance of libAttachSQL.  This is not something I can easily compare to libmysqlclient (there is an API to do it, but it is an unofficial/unsupported API).  But it will be a good test for the use case I originally designed the library for.&lt;/p&gt;
&lt;p&gt;I am no benchmarking expert and I know many of you who reading this are (especially Percona).  Is there anything I missed or could have done better?  Please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
</description><pubDate>Fri, 03 Oct 2014 21:28:00 +0100</pubDate><guid>tag:linuxjedi.co.uk,2014-10-03:posts/2014/Oct/03/libattachsql-benchmarks-with-sysbench/</guid><category>MySQL</category><category>libAttachSQL</category><category>HP</category><category>Advanced Technology Group</category></item><item><title>libAttachSQL Query Example</title><link>http://linuxjedi.co.uk/posts/2014/Sep/23/libattachsql-query-example/</link><description>&lt;p&gt;I was asked some questions on IRC last night about how the query example in libAttachSQL's code base works.  For those who missed previous posts, &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt; is a lightweight, non-blocking, Apache 2.0 licensed C connector for MySQL servers which I am developing for HP's Advanced Technology Group.&lt;/p&gt;
&lt;p&gt;In this blog post I'm going to break down &lt;a class="reference external" href="https://github.com/libattachsql/libattachsql/blob/master/examples/basic_query.c"&gt;a basic query example&lt;/a&gt; and explain what is happening at each step. It is possible that this syntax may change slightly by the time we hit GA but it will be similar to this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;libattachsql-1.0/attachsql.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stddef.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Only one include is needed for the library itself, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;libattachsql-1.0/attachsql.h&lt;/span&gt;&lt;/tt&gt;. The others are used for other functions in the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;attachsql_connect_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_error_st&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT * FROM t1 WHERE name=&amp;#39;fred&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;attachsql_return_t&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_RETURN_NONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_query_row_st&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have setup a few required variables:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;con&lt;/tt&gt; is the connection object used throughout this example&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;error&lt;/tt&gt; is an error struct which is set when an error occurs&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;query&lt;/tt&gt; this is a constant containing the query we wish to execute&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ret&lt;/tt&gt; is where the return code is store for the network functions&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;row&lt;/tt&gt; holds the row results&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;columns&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;current_column&lt;/tt&gt; are used for iterating though the result&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_connect_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;testdb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function creates the connection object.  A connection is not actually made at this point, we are just setting things up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This starts the process of connecting to the MySQL server and sending the query.  The last two parameters are for a way to escape data at the client end in a similar way to prepared statements.  I'll cover this in another blog post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_RETURN_EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_connect_poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is where the magic happens.  Whilst we haven't hit a query EOF or an error we are repeatedly polling the connection to see if we have have a row ready in the network buffer.&lt;/p&gt;
&lt;p&gt;Not only this but a non-blocking DNS lookup, connection and handshake is made here, so it is likely poll will be called several times.  There is an API call to make the connection explicit rather than implicit on the first query and it will need to call &lt;tt class="docutils literal"&gt;attachsql_connect_poll()&lt;/tt&gt; in the same way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_RETURN_ROW_READY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we don't have a row yet continue polling until we do.  In a real-world application you can have other tasks on your main thread going on here and/or poll many connections on a single thread.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_query_row_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Process the row and return an array of pointers to the network read buffer for parts of the row.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_query_column_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;current_column&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%.*s &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Iterate through the columns in the row and print out the result.  Technically we only need to call &lt;tt class="docutils literal"&gt;attachsql_query_column_count()&lt;/tt&gt; once when the first row is ready in the buffer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;attachsql_query_row_next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells the library that we are done with this row and are ready to retrieve the next, which brings us back to polling.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error occurred: %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_error_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we have broken out of the loop due to an error, print that out and free the error object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;attachsql_query_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_connect_destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Close the query and destroy the connection.  All done!&lt;/p&gt;
</description><pubDate>Tue, 23 Sep 2014 23:02:00 +0100</pubDate><guid>tag:linuxjedi.co.uk,2014-09-23:posts/2014/Sep/23/libattachsql-query-example/</guid><category>MySQL</category><category>libAttachSQL</category><category>HP</category><category>Advanced Technology Group</category></item><item><title>New Blog!</title><link>http://linuxjedi.co.uk/posts/2014/Sep/23/new-blog/</link><description>&lt;p&gt;Blogger is a great blogging platform.  Unfortunately it is really difficut to create content that has marked-up code in it.  Which as a developer is a requirement.  Therefore LinuxJedi's /dev/null has now moved to this GitHub pages site using &lt;a class="reference external" href="http://tinkerer.me/"&gt;Tinkerer&lt;/a&gt; to build it.&lt;/p&gt;
&lt;p&gt;The old site and content can still be accessed at &lt;a class="reference external" href="http://thelinuxjedi.blogspot.com/"&gt;http://thelinuxjedi.blogspot.com/&lt;/a&gt;.&lt;/p&gt;
</description><pubDate>Tue, 23 Sep 2014 16:45:00 +0100</pubDate><guid>tag:linuxjedi.co.uk,2014-09-23:posts/2014/Sep/23/new-blog/</guid><category>LinuxJedi</category></item></channel></rss>