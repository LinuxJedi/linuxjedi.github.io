<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>LinuxJedi's /dev/null</title><link href="http://linuxjedi.co.uk/" rel="alternate"></link><link href="http://linuxjedi.co.uk/feeds/coding.atom.xml" rel="self"></link><id>http://linuxjedi.co.uk/</id><updated>2015-02-24T13:25:00+00:00</updated><entry><title>Variable Length Arrays in C</title><link href="http://linuxjedi.co.uk/posts/2015/Feb/24/variable-length-arrays-in-c/" rel="alternate"></link><published>2015-02-24T13:25:00+00:00</published><author><name></name></author><id>tag:linuxjedi.co.uk,2015-02-24:posts/2015/Feb/24/variable-length-arrays-in-c/</id><summary type="html">&lt;p&gt;In a bid to aim this blog at multiple levels I'm going to talk today about Variable Length Arrays (VLAs) in C.  I'm covering this topic in particular because a friend who is a Harvard CS50 student recently asked me about them.&lt;/p&gt;
&lt;p&gt;As many people know, C is my favourite programming language to work in (several have questioned my sanity thanks to this).  It isn't always the right programming language for every project and where it is appropriate I will use an alternative language.  But it is my favourite to work with and HP's Advanced Technology Group allows me to do a lot of work in it.&lt;/p&gt;
&lt;p&gt;In a previous post on my old blog &lt;a class="reference external" href="http://thelinuxjedi.blogspot.co.uk/2014/02/why-vlais-is-bad.html"&gt;I discussed why VLAIS (Variable Length Arrays In Structs) is a bad idea&lt;/a&gt;.  Put simply this is a GCC only feature which can cause a lot of problems.  Unfortunately they are used a lot in the Linux kernel but this is being improved as part of the work to port the kernel to work with the CLang compiler.&lt;/p&gt;
&lt;p&gt;VLAs themselves are not as bad.  For those who don't know what they are, here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fred&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 4 chars + nul terminator&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;name_copy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name_copy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Name is: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name_copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The bit I'm referring to is &amp;quot;&lt;tt class="docutils literal"&gt;char name_copy[length];&lt;/tt&gt;&amp;quot;.  Normally array sizes are fixed at compile time but with the C99 standard VLAs were introduced.  They were in several compilers before that but it was not a standard.  The compiler will turn this into code which allocates &lt;tt class="docutils literal"&gt;name_copy&lt;/tt&gt; to the correct size when the function is entered and frees the memory when the function returns.&lt;/p&gt;
&lt;p&gt;This is incredibly useful but is not without problems:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;You need to make sure that the application doesn't try to use &lt;tt class="docutils literal"&gt;free()&lt;/tt&gt; on the VLA.  This will likely end very badly&lt;/li&gt;
&lt;li&gt;If you have a pointer to a VLA you need to make sure you don't try to access it when the function has returned (just like accessing memory that has been freed)&lt;/li&gt;
&lt;li&gt;Many implementations allocate this memory on the stack instead of the main pool of memory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This last one could be a problem because most platforms at least have a soft limit on stack size.  The default for the machine I'm typing on for example is 8MiB.  This sounds a lot but with recursion it is possible to easily blow this, especially with large arrays.  Ideally VLAs should be used just for allocations you know are going to be quite small and predictable.  If it is a user input without sanitation you could be opening yourself up to an attack vector.&lt;/p&gt;
&lt;p&gt;In summary, VLAs are useful, they make allocation and freeing much easier, especially for multi-dimension arrays.  But you need to be very careful using them and only for small allocations.&lt;/p&gt;
</summary><category term="HP"></category><category term="Advanced Technology Group"></category><category term="C"></category></entry><entry><title>Working With Git</title><link href="http://linuxjedi.co.uk/posts/2015/Jan/25/working-with-git/" rel="alternate"></link><published>2015-01-25T16:33:00+00:00</published><author><name></name></author><id>tag:linuxjedi.co.uk,2015-01-25:posts/2015/Jan/25/working-with-git/</id><summary type="html">&lt;p&gt;At a recent meeting HP's Advanced Technology Group has been agreeing on standards for working with git, covering mainly the collaboration and versioning aspects.  Today I will share with you how I do this in my Open Source projects which has some crossover with the group's work.&lt;/p&gt;
&lt;div class="section" id="versioning"&gt;
&lt;h2&gt;Versioning&lt;/h2&gt;
&lt;p&gt;I use &lt;a class="reference external" href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt; everywhere I can.  In fact I used to pretty much use it everywhere before I knew it was a standard.  This means that I have my GitHub trees layed out so that 'master' is the latest stable code, v1.0 branch is the latest stable v1.0 code, v1.1 branch is the latest in v1.1 and so on.  I then create GPG signed tags from these branches to create releases as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout v1.1
$ git tag -s v1.1.2 -m &lt;span class="s1"&gt;&amp;#39;Version 1.1.2 release&amp;#39;&lt;/span&gt;
$ git push --tags
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="forking"&gt;
&lt;h2&gt;Forking&lt;/h2&gt;
&lt;p&gt;Even if it is just me working on a particular project I will always use forks and pull requests to work on code.  This model works well with &lt;a class="reference external" href="http://semver.org/"&gt;Travis CI&lt;/a&gt; because it can test code prior to merging and give feedback in the pull request.&lt;/p&gt;
&lt;p&gt;For this example I'm assuming you are using SSH keys and two-factor authentication with Git, if you aren't you need to do this ASAP.  Instructions can be found on &lt;a class="reference external" href="https://github.com/blog/1614-two-factor-authentication"&gt;GitHub's blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A fork is typically created as follows:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Create a fork in GitHub, you can do this by clicking the fork button on a project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Grab a local copy of your fork to work with (replacing &lt;cite&gt;USERNAME&lt;/cite&gt; and &lt;cite&gt;Repository&lt;/cite&gt; with whatever is applicable to you):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:USERNAME/Repository
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Then you should set the upstream remote so that you can easily grab the latest code as needed.  I've used HTTPS here because you don't need to be authenticated to do this unless it is a private repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git remote add upstream https://github.com/PROJECT/Repository
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-a-new-branch"&gt;
&lt;h2&gt;Starting a New Branch&lt;/h2&gt;
&lt;p&gt;Whenever you are starting a new group of work, create a new branch.  This holds true for features or just basic one line fixes.  In your fork:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout master
$ git pull --ff-only upstream master
$ git push
$ git checkout -b my_feature
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This pulls the latest code from the upstream master to your master, pushes that to your fork and then creates a new checkout based on that code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="syncing-fork"&gt;
&lt;h2&gt;Syncing Fork&lt;/h2&gt;
&lt;p&gt;If you have worked on some code and at the same time someone else has merged code that may conflict (a pull request will tell you this straight away) you can merge upstream with your commits as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git fetch upstream
$ git merge upstream/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This fetches the upstream code into a local cache and then will merge it.  If there are conflicts they will be flagged for you to resolve.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pull-requests"&gt;
&lt;h2&gt;Pull Requests&lt;/h2&gt;
&lt;p&gt;When your code is good and ready you can send it up as a pull request.  To do this you first need to push it up to your local repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push --set-upstream origin my_feature
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then when you go to the project's repository you will see a button to file a pull request.  If you are using continuous integration such as Travis CI you should wait for that to give a green result and preferably peer review too before clocking the merge button.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="HP"></category><category term="Advanced Technology Group"></category><category term="Git"></category></entry><entry><title>C Library Visibility</title><link href="http://linuxjedi.co.uk/posts/2015/Jan/22/c-library-visibility/" rel="alternate"></link><published>2015-01-22T09:25:00+00:00</published><author><name></name></author><id>tag:linuxjedi.co.uk,2015-01-22:posts/2015/Jan/22/c-library-visibility/</id><summary type="html">&lt;p&gt;I was surprised by the recent &lt;a class="reference external" href="http://mysqlserverteam.com/how-to-use-ssl-and-mysql-client-library-in-the-same-binary/"&gt;announcement&lt;/a&gt; that MySQL are going to start to conceal the hidden function calls in their C connector.  Surprised because although this is great news I had expected them to do this years ago.  Working for HP's Advanced Technology Group I realise I take such things for granted.  For this blog post I'm going to talk about why it is important and how to do it.&lt;/p&gt;
&lt;p&gt;So, when you create a dynamic library in C the default thing that happens is every function call in that library effectively becomes a potential API call.  Whether you document every single function or not to make it official API is up to you but I suspect in 99.99% of cases there are private functions you don't want users to mess with.  Additionally holding the symbol information for every function so that you can link your application to it takes a massive amount of space, one such library I can think of is 8x bigger than it should be due to exposing every function call.&lt;/p&gt;
&lt;p&gt;In MySQL's case and likely others this can cause a problem with collisions during linking.  MySQL can use its bundled in YaSSL library to supply SSL, and due to the functions being exposed this can cause problems if your application links to libmysqlclient and OpenSSL since they both use the same public API calls in many places.&lt;/p&gt;
&lt;p&gt;RedHat and other distributions actually solve this in MySQL by stripping the binaries of unneeded symbols at compile time.  This is indeed one effective solution.  But I don't believe this is the correct solution.  In fact Ulrich Drepper in &lt;a class="reference external" href="https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf"&gt;How To Write Shared Libraries&lt;/a&gt; pretty much reserves this as a last resort.&lt;/p&gt;
&lt;div class="section" id="link-time-visibility"&gt;
&lt;h2&gt;Link Time Visibility&lt;/h2&gt;
&lt;p&gt;The solution I and many others recommend is using visibility at link time.  There are three parts to applying this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The compiler flag&lt;/li&gt;
&lt;li&gt;An extra include file&lt;/li&gt;
&lt;li&gt;Marking the functions you want to be in the API as public&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I shall go through these steps for GCC, other compilers will be very similar and there is plenty of information on the internet about this.&lt;/p&gt;
&lt;div class="section" id="compiler-flag"&gt;
&lt;h3&gt;Compiler Flag&lt;/h3&gt;
&lt;p&gt;You simply need to add one compiler flag which will hide all function calls by default instead of exposing them all by default:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-fvisibility=hidden
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="include-file"&gt;
&lt;h3&gt;Include File&lt;/h3&gt;
&lt;p&gt;This is one example taken from &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt; and there is an example with more platform support on the &lt;a class="reference external" href="https://gcc.gnu.org/wiki/Visibility"&gt;GCC Visibility manual page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this example you need to change &lt;tt class="docutils literal"&gt;BUILDING_ASQL&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ASQL_API&lt;/tt&gt; to suit your own naming.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#if defined(BUILDING_ASQL)&lt;/span&gt;
&lt;span class="cp"&gt;# if defined(HAVE_VISIBILITY) &amp;amp;&amp;amp; HAVE_VISIBILITY&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API __attribute__ ((visibility(&amp;quot;default&amp;quot;)))&lt;/span&gt;
&lt;span class="cp"&gt;# elif defined (__SUNPRO_C) &amp;amp;&amp;amp; (__SUNPRO_C &amp;gt;= 0x550)&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API __global&lt;/span&gt;
&lt;span class="cp"&gt;# elif defined(_MSC_VER)&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API extern __declspec(dllexport)&lt;/span&gt;
&lt;span class="cp"&gt;# else&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API&lt;/span&gt;
&lt;span class="cp"&gt;# endif &lt;/span&gt;&lt;span class="cm"&gt;/* defined(HAVE_VISIBILITY) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#else  &lt;/span&gt;&lt;span class="cm"&gt;/* defined(BUILDING_ASQL) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# if defined(_MSC_VER)&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API extern __declspec(dllimport)&lt;/span&gt;
&lt;span class="cp"&gt;# else&lt;/span&gt;
&lt;span class="cp"&gt;#  define ASQL_API&lt;/span&gt;
&lt;span class="cp"&gt;# endif &lt;/span&gt;&lt;span class="cm"&gt;/* defined(_MSC_VER) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif &lt;/span&gt;&lt;span class="cm"&gt;/* defined(BUILDING_ASQL) */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="marking-public-api"&gt;
&lt;h3&gt;Marking Public API&lt;/h3&gt;
&lt;p&gt;With the above include file you need to define &lt;tt class="docutils literal"&gt;BUILDING_ASQL&lt;/tt&gt; somewhere in your library compiling.  This makes sure that during the library compiling/linking all the functions can be seen but they will be hidden at link time from external applications.&lt;/p&gt;
&lt;p&gt;Then when you are defining an API call in your .h file you can do as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hidden_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;ASQL_API&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;public_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see here I have prepended the function declaration with &lt;tt class="docutils literal"&gt;ASQL_API&lt;/tt&gt; for any function I wish to be part of the public API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;If you leave undocumented API dangling people will tend to use it, which causes all sorts of issues when you want to change some of the internal functions.  Ideally when writing an API setting the visibility should be a very early step, but thankfully it is one that can easily be added to a project at any time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="HP"></category><category term="Advanced Technology Group"></category><category term="C"></category><category term="API"></category><category term="MySQL"></category></entry><entry><title>The Pointer Corruption Bug</title><link href="http://linuxjedi.co.uk/posts/2015/Jan/20/the-pointer-corruption-bug/" rel="alternate"></link><published>2015-01-20T09:16:00+00:00</published><author><name></name></author><id>tag:linuxjedi.co.uk,2015-01-20:posts/2015/Jan/20/the-pointer-corruption-bug/</id><summary type="html">&lt;p&gt;Or an alternative name for this post...&lt;/p&gt;
&lt;div class="section" id="why-api-docs-should-have-examples"&gt;
&lt;h2&gt;Why API Docs Should Have Examples&lt;/h2&gt;
&lt;p&gt;As part of my continuation of libAttachSQL for HP's Advanced Technology Group I have recently been focusing on a Python based wrapper called pyAttachSQL.  This is currently at an alpha level of release with no package builds yet.&lt;/p&gt;
&lt;p&gt;Today I want to talk about one (silly on my part) very frustrating bug I found whilst working on pyAttachSQL and why this means API docs should have examples for every call.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-crash"&gt;
&lt;h2&gt;The Crash&lt;/h2&gt;
&lt;p&gt;Whilst writing the group connection functions I was using a &lt;a class="reference external" href="https://docs.python.org/2/c-api/arg.html#c.Py_BuildValue"&gt;Py_BuildValue&lt;/a&gt; call to generate parameters to use in a callback &lt;a class="reference external" href="https://docs.python.org/2/c-api/object.html#c.PyObject_CallObject"&gt;PyObject_CallObject&lt;/a&gt;.  So the code looked a little like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cbargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Py_BuildValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;iOOO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pycon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pycon&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cb_args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;PyObject_CallObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cb_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cbargs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Py_DECREF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cbargs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those who are Python API veterans will be able to see straight away where I went wrong but I am quite new to the API.  The code was segfaulting on &lt;tt class="docutils literal"&gt;PyObject_CallObject&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-big-dumb-mistake"&gt;
&lt;h2&gt;My Big Dumb Mistake&lt;/h2&gt;
&lt;img alt="" src="/images/droids.jpg" /&gt;
&lt;p&gt;Whilst debugging this I found the problem was in &lt;tt class="docutils literal"&gt;cbargs&lt;/tt&gt;, for some reason the pointers to &lt;tt class="docutils literal"&gt;pycon&lt;/tt&gt; and alike were slightly different to when they were set.  After some time going over it again and again in GDB and watching the pointers get incremented it suddenly hit me.  The incrementation was happening during reference increment functions inside &lt;tt class="docutils literal"&gt;Py_BuildValue&lt;/tt&gt;.  Which makes sense because the one first items in a &lt;tt class="docutils literal"&gt;PyObject&lt;/tt&gt; structure is the reference count.  I was supposed to pass pointers, not pointers to pointers.  The &lt;tt class="docutils literal"&gt;Py_BuildValue&lt;/tt&gt; function has no type checking so was taking whatever you passed to it as a pointer to a structure.&lt;/p&gt;
&lt;p&gt;So the question many of you would be asking is: why did you pass pointers to pointers?  That is easy to answer...  Earlier in the code I have been using the &lt;a class="reference external" href="https://docs.python.org/2/c-api/arg.html#c.PyArg_ParseTuple"&gt;PyArg_ParseTuple&lt;/a&gt; and similar functions which are on the same documentation page, using a similar API and I assumed the API was consistent with no examples to show me otherwise.  The fix was to simply remove the &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt; symbols from the above code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learnt"&gt;
&lt;h2&gt;Lessons Learnt&lt;/h2&gt;
&lt;p&gt;I guess there is two lessons I have learnt from this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't assume that an API is consistent&lt;/li&gt;
&lt;li&gt;Add examples for every API call in the documentation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll shortly be opening a ticket for libAttachSQL and pyAttachSQL to implement the second item.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="HP"></category><category term="Advanced Technology Group"></category><category term="C"></category><category term="Python"></category><category term="API"></category><category term="Documentation"></category><category term="libAttachSQL"></category></entry><entry><title>Autotools and Mac Universal binaries</title><link href="http://linuxjedi.co.uk/posts/2014/Nov/25/autotools-and-mac-universal-binaries/" rel="alternate"></link><published>2014-11-25T16:38:00+00:00</published><author><name></name></author><id>tag:linuxjedi.co.uk,2014-11-25:posts/2014/Nov/25/autotools-and-mac-universal-binaries/</id><summary type="html">&lt;p&gt;Recently I have been working on a Python based wrapper for &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt; and found that when testing on a Mac I was having trouble compiling the wrapper.  It turns out that Python included in Mac operating systems uses a universal binary (also called fat binary) format and since libAttachSQL is not compiled that way it would not link correctly.&lt;/p&gt;
&lt;p&gt;For those who have never come across this, Universal binaries were originally intended to contain executables for multiple platforms (such as PPC and i386) to ease hardware transition.  The OS will only load the compatible part into memory and use that.  Python as well as several other current Mac binaries are compiled to have i386 and x86_64 binaries in one package.&lt;/p&gt;
&lt;p&gt;Compiling a Universal binary is actually relatively easy but I didn't want to put the hard work on the use who is compiling the library and I wanted something I could use in other projects in the future.  So I have created an m4 script which can be used with Autotools to build Universal binaries.  This can be found in my &lt;a class="reference external" href="https://github.com/LinuxJedi/m4scripts"&gt;m4 scripts GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The script in question is called &lt;tt class="docutils literal"&gt;ax_mac_universal.m4&lt;/tt&gt; and when the &lt;tt class="docutils literal"&gt;AX_UNIVERSAL_BINARY&lt;/tt&gt; macro is used it will automatically detect if the environment supports universal binaries and add the necessary compiler flags to build them.  It also adds &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--enable-universal-binary&lt;/span&gt;&lt;/tt&gt; to configure so that you can force this feature on/off at will.&lt;/p&gt;
&lt;p&gt;This script will be included as part of the upcoming libAttachSQL 1.0.2 release.&lt;/p&gt;
</summary><category term="HP"></category><category term="Advanced Technology Group"></category><category term="libAttachSQL"></category><category term="Autotools"></category></entry><entry><title>Why JSON is bad for applications</title><link href="http://linuxjedi.co.uk/posts/2014/Oct/31/why-json-is-bad-for-applications/" rel="alternate"></link><published>2014-10-31T20:39:00+00:00</published><author><name></name></author><id>tag:linuxjedi.co.uk,2014-10-31:posts/2014/Oct/31/why-json-is-bad-for-applications/</id><summary type="html">&lt;p&gt;Today I read an article about how company X has improved things by amongst other things ditching JSON after 2 years of using it.  Before I start on this subject I should say that JSON does have its place.  If you have a web application where a browser is talking to a web server and in particular uses JavaScript then JSON is a good fit.&lt;/p&gt;
&lt;p&gt;I've discussed this issue several times before with &lt;a class="reference external" href="http://krow.net/"&gt;Brian Aker&lt;/a&gt; who works with me at HP's Advanced Technology Group and in the past I have been hit with the issues I'm going to talk about here.&lt;/p&gt;
&lt;p&gt;JSON is human readable and easy to parse, that cannot be denied and for prototyping is good in a pinch.  The first problem comes when you need to validate data.  I've been stung many times by one end trying to read/write the JSON in a slightly different format to the other end, the end result is always not pretty.  This is one advantage that XML and SOAP has going for it over JSON since validation is easier.  I'm personally not a fan of XML but there are many who are.&lt;/p&gt;
&lt;p&gt;There are additional problems when you start using mobile platforms.  Mobile networks are unreliable, you may have a good 3G signal but it is possible to only get dial-up speed through it due to all the other users.  JSON is verbose, XML more so which requires more data transfer.  Whilst this can be resolved with protocol compression it will require additional decoding on the client side to do this.  In addition data conversion will be needed in many cases for numeric fields.&lt;/p&gt;
&lt;p&gt;The biggest problem with JSON is versioning.  As you add more features to your application there will likely come a time where you need to change the data structure for your messages.  Often you can't guarantee that your client is using the same version of the software as your server so backwards and forwards compatibility problems can arise.  Resolving these often makes the JSON messages very complex to create and decode.  This is not as much of a problem for web applications because the browser usually grabs an update version of the JavaScript on execution.  So changing the data format at any time is easy as long as both ends agree on the format.&lt;/p&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;p&gt;For many applications the data you are sending is directly from a database or at least data that has been modified since being read from a database.  So you will likely want the data model for your messages to match this as much as possible.  This is where &lt;a class="reference external" href="https://developers.google.com/protocol-buffers/"&gt;Google's Protocol Buffers&lt;/a&gt; fit nicely.&lt;/p&gt;
&lt;p&gt;Protocol Buffers allow you to specify a schema for the data in a human readable format, it actually looks a little like a database schema.  They will automatically validate the data for you and have versioning built-in.  This means you can make your code easily backwards and forwards compatible.&lt;/p&gt;
&lt;p&gt;There is a positive and negative side to the data transfer of Protocol Buffers.  It is a binary protocol.  This means it takes up minimal bandwidth on the wire but also means that it is not human readable and difficult to figure out which data is for which field (although should not be used for security through obscurity).  The same could be said if you were given InnoDB table data without the schemas.  It also means it may be possible to compress the data further with something like LZO or DEFLATE.&lt;/p&gt;
&lt;p&gt;I recommend application developers consider Protocol Buffers instead of JSON when they are next developing a server/client application.&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;I updated this article to explain the binary protocol a little better.  Thanks to Antony Curtis for pointing it out.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="HP"></category><category term="Advanced Technology Group"></category></entry></feed>