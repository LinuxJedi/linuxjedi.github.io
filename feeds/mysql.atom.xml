<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>LinuxJedi's /dev/null</title><link href="http://linuxjedi.co.uk/" rel="alternate"></link><link href="http://linuxjedi.co.uk/feeds/mysql.atom.xml" rel="self"></link><id>http://linuxjedi.co.uk/</id><updated>2014-10-03T21:28:00+02:00</updated><entry><title>libAttachSQL Benchmarks With Sysbench</title><link href="http://linuxjedi.co.uk/posts/2014/Oct/03/libattachsql-benchmarks-with-sysbench/" rel="alternate"></link><updated>2014-10-03T21:28:00+02:00</updated><author><name></name></author><id>tag:linuxjedi.co.uk,2014-10-03:posts/2014/Oct/03/libattachsql-benchmarks-with-sysbench/</id><summary type="html">&lt;p&gt;This week I have been spending a little bit of time creating a module for &lt;a class="reference external" href="https://launchpad.net/sysbench"&gt;Sysbench&lt;/a&gt; so that it can use &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt; as a database driver.  The reason for doing this is twofold:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://krow.net/"&gt;Brian&lt;/a&gt; (my boss at HP's Advanced Technology Group) said now would be a good time to benchmark libAttachSQL&lt;/li&gt;
&lt;li&gt;I really needed more than a few basic queries to shake out bugs in the library, and a benchmark is a good way to shove a few million through it&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the bug front, it did find a total of 5 bugs, a couple of them serious.  Which is great, the more testing and bug finding the better.  These have all been fixed in &lt;a class="reference external" href="http://github.com/libattachsql/libattachsql"&gt;GitHub&lt;/a&gt; and will be part of the upcoming 0.5.0 release.&lt;/p&gt;
&lt;div class="section" id="the-test-setup"&gt;
&lt;h2&gt;The Test Setup&lt;/h2&gt;
&lt;p&gt;To benchmark I used an HP Z620, 6-core Xeon with 16GB RAM and an SSD.  The OS was Antergos Linux (Arch with a nicer theme) and the server was MySQL 5.6.20 compiled from source.  The only real tweaks I've made to the out-of-box config that would make any difference are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;innodb_buffer_pool_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3G&lt;/span&gt;
&lt;span class="na"&gt;innodb_locks_unsafe_for_binlog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;innodb_buffer_pool_instances&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;8&lt;/span&gt;
&lt;span class="na"&gt;thread_cache&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;256&lt;/span&gt;
&lt;span class="na"&gt;query_cache_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;query_cache_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="na"&gt;max_connections&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20020&lt;/span&gt;
&lt;span class="na"&gt;max_user_connections&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;20000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/libattachsql/sysbench"&gt;Sysbench in libAttachSQL's GitHub&lt;/a&gt; was used which just has the additional driver for libAttachSQL.  Once I'm 100% happy with the driver I offer it as an upstream branch.  libAttachSQL master is used, partly due to the bug fixes and partly because there has been a large API change in master for improved error handling.&lt;/p&gt;
&lt;p&gt;For both libmysqlclient and libAttachSQL the connections were made using Unix Domain Sockets.  For the sysbench setup I just left it at the default number of rows.  The Sysbench driver for libAttachSQL enables the semi-blocking mode which is better performance for single-connection-per-thread applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="select-test"&gt;
&lt;h2&gt;Select Test&lt;/h2&gt;
&lt;p&gt;First the basic select test was run, which queries for random single integers in a table.  This was run with the MySQL driver as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;sysbench/tests/db/select.lua --db-driver&lt;span class="o"&gt;=&lt;/span&gt;mysql --mysql-socket&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --mysql-user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --mysql-password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --mysql-db&lt;span class="o"&gt;=&lt;/span&gt;testdb --num-threads&lt;span class="o"&gt;=&lt;/span&gt;8 --max-requests&lt;span class="o"&gt;=&lt;/span&gt;1000000 run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And libAttachSQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;sysbench/tests/db/select.lua --db-driver&lt;span class="o"&gt;=&lt;/span&gt;attachsql --attachsql-socket&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --attachsql-user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --attachsql-password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --attachsql-db&lt;span class="o"&gt;=&lt;/span&gt;testdb --num-threads&lt;span class="o"&gt;=&lt;/span&gt;8 --max-requests&lt;span class="o"&gt;=&lt;/span&gt;1000000 run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The results were as follows:&lt;/p&gt;
&lt;img alt="" src="images/select_benchmark.png" /&gt;
&lt;p&gt;I am pretty impressed with these results so far, since I have done no optimisation work on the code.  I originally wanted the first GA to have performance on-par with libmysqlclient and it looks like that goal has been met.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="select-random-points"&gt;
&lt;h2&gt;Select Random Points&lt;/h2&gt;
&lt;p&gt;I used the &amp;quot;Select Random Points&amp;quot; benchmark because it is one of the only ones that comes with Sysbench which uses Prepared Statements.  It selects 10 random integers from a table per query.&lt;/p&gt;
&lt;p&gt;As before this was run on using libmysqlclient with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;sysbench/tests/db/select_random_points.lua --db-driver&lt;span class="o"&gt;=&lt;/span&gt;mysql --mysql-socket&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --mysql-user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --mysql-password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --mysql-db&lt;span class="o"&gt;=&lt;/span&gt;testdb --num-threads&lt;span class="o"&gt;=&lt;/span&gt;8 --max-requests&lt;span class="o"&gt;=&lt;/span&gt;1000000 run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with libAttachSQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sysbench --test&lt;span class="o"&gt;=&lt;/span&gt;sysbench/tests/db/select_random_points.lua --db-driver&lt;span class="o"&gt;=&lt;/span&gt;attachsql --attachsql-socket&lt;span class="o"&gt;=&lt;/span&gt;/tmp/mysql.sock --attachsql-user&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --attachsql-password&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; --attachsql-db&lt;span class="o"&gt;=&lt;/span&gt;testdb --num-threads&lt;span class="o"&gt;=&lt;/span&gt;8 --max-requests&lt;span class="o"&gt;=&lt;/span&gt;1000000 run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The results were as follows:&lt;/p&gt;
&lt;img alt="" src="images/select_random_points_benchmark.png" /&gt;
&lt;p&gt;Again there isn't a lot in it.  libmysqlclient is edging slightly over libAttachSQL in most of this chart.  I believe it is because in the libAttachSQL driver I told it to convert all results to string outputs.  This will add additional overhead.  Next week I will tweak the driver to make sure that the conversion isn't done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I'm very happy with these Sysbench tests because not only has it bashed libAttachSQL with a sledgehammer it has given me some idea of the performance.  I'm happy enough with these figures to not do any performance tuning until after the first GA release.&lt;/p&gt;
&lt;p&gt;At some point soon I will also benchmark the single-threaded multi-connection performance of libAttachSQL.  This is not something I can easily compare to libmysqlclient (there is an API to do it, but it is an unofficial/unsupported API).  But it will be a good test for the use case I originally designed the library for.&lt;/p&gt;
&lt;p&gt;I am no benchmarking expert and I know many of you who reading this are (especially Percona).  Is there anything I missed or could have done better?  Please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="MySQL"></category><category term="libAttachSQL"></category><category term="HP"></category><category term="Advanced Technology Group"></category></entry><entry><title>libAttachSQL Query Example</title><link href="http://linuxjedi.co.uk/posts/2014/Sep/23/libattachsql-query-example/" rel="alternate"></link><updated>2014-09-23T23:02:00+02:00</updated><author><name></name></author><id>tag:linuxjedi.co.uk,2014-09-23:posts/2014/Sep/23/libattachsql-query-example/</id><summary type="html">&lt;p&gt;I was asked some questions on IRC last night about how the query example in libAttachSQL's code base works.  For those who missed previous posts, &lt;a class="reference external" href="http://libattachsql.org/"&gt;libAttachSQL&lt;/a&gt; is a lightweight, non-blocking, Apache 2.0 licensed C connector for MySQL servers which I am developing for HP's Advanced Technology Group.&lt;/p&gt;
&lt;p&gt;In this blog post I'm going to break down &lt;a class="reference external" href="https://github.com/libattachsql/libattachsql/blob/master/examples/basic_query.c"&gt;a basic query example&lt;/a&gt; and explain what is happening at each step. It is possible that this syntax may change slightly by the time we hit GA but it will be similar to this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;libattachsql-1.0/attachsql.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stddef.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Only one include is needed for the library itself, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;libattachsql-1.0/attachsql.h&lt;/span&gt;&lt;/tt&gt;. The others are used for other functions in the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;attachsql_connect_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_error_st&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;SELECT * FROM t1 WHERE name=&amp;#39;fred&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;attachsql_return_t&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_RETURN_NONE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_query_row_st&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we have setup a few required variables:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;con&lt;/tt&gt; is the connection object used throughout this example&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;error&lt;/tt&gt; is an error struct which is set when an error occurs&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;query&lt;/tt&gt; this is a constant containing the query we wish to execute&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;ret&lt;/tt&gt; is where the return code is store for the network functions&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;row&lt;/tt&gt; holds the row results&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;columns&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;current_column&lt;/tt&gt; are used for iterating though the result&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_connect_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3306&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;testdb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function creates the connection object.  A connection is not actually made at this point, we are just setting things up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This starts the process of connecting to the MySQL server and sending the query.  The last two parameters are for a way to escape data at the client end in a similar way to prepared statements.  I'll cover this in another blog post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_RETURN_EOF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_connect_poll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is where the magic happens.  Whilst we haven't hit a query EOF or an error we are repeatedly polling the connection to see if we have have a row ready in the network buffer.&lt;/p&gt;
&lt;p&gt;Not only this but a non-blocking DNS lookup, connection and handshake is made here, so it is likely poll will be called several times.  There is an API call to make the connection explicit rather than implicit on the first query and it will need to call &lt;tt class="docutils literal"&gt;attachsql_connect_poll()&lt;/tt&gt; in the same way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;ATTACHSQL_RETURN_ROW_READY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we don't have a row yet continue polling until we do.  In a real-world application you can have other tasks on your main thread going on here and/or poll many connections on a single thread.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_query_row_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Process the row and return an array of pointers to the network read buffer for parts of the row.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attachsql_query_column_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;current_column&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%.*s &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;current_column&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Iterate through the columns in the row and print out the result.  Technically we only need to call &lt;tt class="docutils literal"&gt;attachsql_query_column_count()&lt;/tt&gt; once when the first row is ready in the buffer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;attachsql_query_row_next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells the library that we are done with this row and are ready to retrieve the next, which brings us back to polling.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Error occurred: %s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_error_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we have broken out of the loop due to an error, print that out and free the error object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;attachsql_query_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;attachsql_connect_destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Close the query and destroy the connection.  All done!&lt;/p&gt;
</summary><category term="MySQL"></category><category term="libAttachSQL"></category><category term="HP"></category><category term="Advanced Technology Group"></category></entry></feed>